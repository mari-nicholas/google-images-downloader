#  @file SearchQuery.py
#  @author Nicholas Mari, Samuel Crawford
#  @brief Generates a google images search
#  URL based on provided search parameters
#  @date 03/31/2020

# Secrets: The format and structure of the Google search query.
# Services: Converts the processed data from the input module
# into a URL string representingthe desired Google search query.

from urllib.parse import quote


#  @brief builds string of parameters
#  @details Uses values from the argument array to build
#  a proper parameter string that can be used in the search url
#  @param args dictionary of search parameters
#  @return paramStr string of all parameters joined together
def buildURLParam(args):
    searchArgs = {'aspectratio': args['aspectratio'],
                  'colour': args['colour'],
                  'filetype': args['filetype'],
                  'imageage': args['imageage'],
                  'imagesize': args['imagesize'],
                  'imagetype': args['imagetype'],
                  'license': args['license']
                  }

    ## This contains all the equivalent text that will be used in
    ## the url rather than what is input at the command line
    ## For example in the url Red will become ic:specific,isc:red
    urlFormats = {'red': 'ic:specific,isc:red',
                  'orange': 'ic:specific,isc:orange',
                  'yellow': 'ic:specific,isc:yellow',
                  'green': 'ic:specific,isc:green',
                  'teal': 'ic:specific,isc:teal',
                  'blue': 'ic:specific,isc:blue',
                  'purple': 'ic:specific,isc:purple',
                  'pink': 'ic:specific,isc:pink',
                  'white': 'ic:specific,isc:white',
                  'gray': 'ic:specific,isc:gray',
                  'black': 'ic:specific,isc:black',
                  'brown': 'ic:specific,isc:brown',
                  'full-color': 'ic:color',
                  'black-and-white': 'ic:gray',
                  'transparent': 'ic:trans',
                  'labeled-for-reuse-with-modifications': 'sur:fmc',
                  'labeled-for-reuse': 'sur:fc',
                  'labeled-for-noncommercial-reuse-with-modification': 'sur:fm',
                  'labeled-for-nocommercial-reuse': 'sur:f',
                  'large': 'isz:l',
                  'medium': 'isz:m',
                  'icon': 'isz:i',
                  '>400*300': 'isz:lt,islt:qsvga',
                  '>640*480': 'isz:lt,islt:vga',
                  '>800*600': 'isz:lt,islt:svga',
                  '>1024*768': 'visz:lt,islt:xga',
                  '>2MP': 'isz:lt,islt:2mp',
                  '>4MP': 'isz:lt,islt:4mp',
                  '>6MP': 'isz:lt,islt:6mp',
                  '>8MP': 'isz:lt,islt:8mp',
                  '>10MP': 'isz:lt,islt:10mp',
                  '>12MP': 'isz:lt,islt:12mp',
                  '>15MP': 'isz:lt,islt:15mp',
                  '>20MP': 'isz:lt,islt:20mp',
                  '>40MP': 'isz:lt,islt:40mp',
                  '>70MP': 'isz:lt,islt:70mp',
                  'face': 'itp:face',
                  'photo': 'itp:photo',
                  'clipart': 'itp:clipart',
                  'line-drawing': 'itp:lineart',
                  'animated': 'itp:animated',
                  'past-24-hours': 'qdr:d',
                  'past-7-days': 'qdr:w',
                  'past-month': 'qdr:m',
                  'past-year': 'qdr:y',
                  'tall': 'iar:t',
                  'square': 'iar:s',
                  'wide': 'iar:w',
                  'panoramic': 'iar:xw',
                  'jpg': 'ift:jpg',
                  'gif': 'ift:gif',
                  'png': 'ift:png',
                  'bmp': 'ift:bmp',
                  'svg': 'ift:svg',
                  'webp': 'webp',
                  'ico': 'ift:ico',
                  'raw': 'ift:craw'}

    params = [urlFormats[searchArgs[i]] for i in searchArgs if searchArgs[i]]

    paramStr = ",".join(params)

    return paramStr


#  @brief builds the URL used to search for images
#  @details Builds a google images search url based on the
#  parameters string generated by the  buildURLParam function
#  @param args dictionary of search parameters
#  @return url the google images search url
def buildURL(args):

    regions = {'Afghanistan': 'countryAF',
               'Albania': 'countryAL',
               'Algeria': 'countryDZ',
               'American Samoa': 'countryAS',
               'Andorra': 'countryAD',
               'Angola': 'countryAO',
               'Anguilla': 'countryAI',
               'Antigua & Barbuda': 'countryAG',
               'Argentina': 'countryAR',
               'Armenia': 'countryAM',
               'Australia': 'countryAU',
               'Austria': 'countryAT',
               'Azerbaijan': 'countryAZ',
               'Bahamas': 'countryBS',
               'Bahrain': 'countryBH',
               'Bangladesh': 'countryBD',
               'Belarus': 'countryBY',
               'Belgium': 'countryBE',
               'Belize': 'countryBZ',
               'Benin': 'countryBJ',
               'Bhutan': 'countryBT',
               'Bolivia': 'countryBO',
               'Bosnia & Herzegovina': 'countryBA',
               'Botswana': 'countryBW',
               'Brazil': 'countryBR',
               'British Virgin Islands': 'countryVG',
               'Brunei': 'countryBN',
               'Bulgaria': 'countryBG',
               'Burkina Faso': 'countryBF',
               'Burundi': 'countryBI',
               'Cambodia': 'countryKH',
               'Cameroon': 'countryCM',
               'Canada': 'countryCA',
               'Cape Verde': 'countryCV',
               'Central African Republic': 'countryCF',
               'Chad': 'countryTD',
               'Chile': 'countryCL',
               'Colombia': 'countryCO',
               'Congo - Brazzaville': 'countryCG',
               'Congo - Kinshasa': 'countryCD',
               'Cook Islands': 'countryCK',
               'Costa Rica': 'countryCR',
               'Côte d’Ivoire': 'countryCI',
               'Croatia': 'countryHR',
               'Cuba': 'countryCU',
               'Cyprus': 'countryCY',
               'Czechia': 'countryCZ',
               'Denmark': 'countryDK',
               'Djibouti': 'countryDJ',
               'Dominica': 'countryDM',
               'Dominican Republic': 'countryDO',
               'Ecuador': 'countryEC',
               'Egypt': 'countryEG',
               'El Salvador': 'countrySV',
               'Estonia': 'countryEE',
               'Ethiopia': 'countryET',
               'Fiji': 'countryFJ',
               'Finland': 'countryFI',
               'France': 'countryFR',
               'Gabon': 'countryGA',
               'Gambia': 'countryGM',
               'Georgia': 'countryGE',
               'Germany': 'countryDE',
               'Ghana': 'countryGH',
               'Gibraltar': 'countryGI',
               'Greece': 'countryGR',
               'Greenland': 'countryGL',
               'Guatemala': 'countryGT',
               'Guernsey': 'countryGG',
               'Guyana': 'countryGY',
               'Haiti': 'countryHT',
               'Honduras': 'countryHN',
               'Hong Kong': 'countryHK',
               'Hungary': 'countryHU',
               'Iceland': 'countryIS',
               'India': 'countryIN',
               'Indonesia': 'countryID',
               'Iraq': 'countryIQ',
               'Ireland': 'countryIE',
               'Isle of Man': 'countryIM',
               'Israel': 'countryIL',
               'Italy': 'countryIT',
               'Jamaica': 'countryJM',
               'Japan': 'countryJP',
               'Jersey': 'countryJE',
               'Jordan': 'countryJO',
               'Kazakhstan': 'countryKZ',
               'Kenya': 'countryKE',
               'Kiribati': 'countryKI',
               'Kuwait': 'countryKW',
               'Kyrgyzstan': 'countryKG',
               'Laos': 'countryLA',
               'Latvia': 'countryLV',
               'Lebanon': 'countryLB',
               'Lesotho': 'countryLS',
               'Libya': 'countryLY',
               'Liechtenstein': 'countryLI',
               'Lithuania': 'countryLT',
               'Luxembourg': 'countryLU',
               'Madagascar': 'countryMG',
               'Malawi': 'countryMW',
               'Malaysia': 'countryMY',
               'Maldives': 'countryMV',
               'Mali': 'countryML',
               'Malta': 'countryMT',
               'Mauritius': 'countryMU',
               'Mexico': 'countryMX',
               'Micronesia': 'countryFM',
               'Moldova': 'countryMD',
               'Mongolia': 'countryMN',
               'Montenegro': 'countryME',
               'Montserrat': 'countryMS',
               'Morocco': 'countryMA',
               'Mozambique': 'countryMZ',
               'Myanmar (Burma)': 'countryMM',
               'Namibia': 'countryNA',
               'Nauru': 'countryNR',
               'Nepal': 'countryNP',
               'Netherlands': 'countryNL',
               'New Zealand': 'countryNZ',
               'Nicaragua': 'countryNI',
               'Niger': 'countryNE',
               'Nigeria': 'countryNG',
               'Niue': 'countryNU',
               'North Macedonia': 'countryMK',
               'Norway': 'countryNO',
               'Oman': 'countryOM',
               'Pakistan': 'countryPK',
               'Palestine': 'countryPS',
               'Panama': 'countryPA',
               'Papua New Guinea': 'countryPG',
               'Paraguay': 'countryPY',
               'Peru': 'countryPE',
               'Philippines': 'countryPH',
               'Pitcairn Islands': 'countryPN',
               'Poland': 'countryPL',
               'Portugal': 'countryPT',
               'Puerto Rico': 'countryPR',
               'Qatar': 'countryQA',
               'Romania': 'countryRO',
               'Russia': 'countryRU',
               'Rwanda': 'countryRW',
               'Samoa': 'countryWS',
               'San Marino': 'countrySM',
               'São Tomé & Príncipe': 'countryST',
               'Saudi Arabia': 'countrySA',
               'Senegal': 'countrySN',
               'Serbia': 'countryRS',
               'Seychelles': 'countrySC',
               'Sierra Leone': 'countrySL',
               'Singapore': 'countrySG',
               'Slovakia': 'countrySK',
               'Slovenia': 'countrySI',
               'Solomon Islands': 'countrySB',
               'Somalia': 'countrySO',
               'South Africa': 'countryZA',
               'South Korea': 'countryKR',
               'Spain': 'countryES',
               'Sri Lanka': 'countryLK',
               'St. Helena': 'countrySH',
               'St. Vincent & Grenadines': 'countryVC',
               'Suriname': 'countrySR',
               'Sweden': 'countrySE',
               'Switzerland': 'countryCH',
               'Taiwan': 'countryTW',
               'Tajikistan': 'countryTJ',
               'Tanzania': 'countryTZ',
               'Thailand': 'countryTH',
               'Timor-Leste': 'countryTL',
               'Togo': 'countryTG',
               'Tonga': 'countryTO',
               'Trinidad & Tobago': 'countryTT',
               'Tunisia': 'countryTN',
               'Turkey': 'countryTR',
               'Turkmenistan': 'countryTM',
               'U.S. Virgin Islands': 'countryVI',
               'Uganda': 'countryUG',
               'Ukraine': 'countryUA',
               'United Arab Emirates': 'countryAE',
               'United Kingdom': 'countryGB',
               'United States': 'countryUS',
               'Uruguay': 'countryUY',
               'Uzbekistan': 'countryUZ',
               'Vanuatu': 'countryVU',
               'Venezuela': 'countryVE',
               'Vietnam': 'countryVN',
               'Zambia': 'countryZM',
               'Zimbabwe': 'countryZW'}

    params = buildURLParam(args)

    if(args['region']):
        region = regions[args['region']]
    else:
        region = ''

    url = 'https://www.google.com/search?as_st=y&tbm=isch&hl=en' + \
          '&as_q=' + quote(args['keyword'].encode('utf-8')) + \
          '&as_epq=&as_oq=&as_eq=' + \
          '&cr=' + quote(region.encode('utf-8')) + \
          '&as_sitesearch=' + quote(args['whitelist'].encode('utf-8')) + \
          '&tbs=' + quote(params.encode('utf-8'))

    if args['safesearch']:
        url += "&safe=active"
    else:
        url += "&safe=images"

    return url
